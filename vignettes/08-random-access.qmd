---
title: "Testing random access to the data performance"
editor: source
---

```{r}
pkgload::load_all()
library(microbenchmark)
library(bench)
```

## Read random countries/years/areas/genders/ages from the data

```{r eval=FALSE}
library(purrr)
library(arrow)
library(dplyr, warn.conflicts = FALSE)
library(DBI)
library(duckdb)
library(dbplyr)
library(duckplyr)
library(here)
library(glue)


pqt_fldr <- here("data-testing")
# pqt_path <- file.path(pkt_fldr, from_pkt, "**/*.parquet")
duck_fldr <- here("data-testing-duck")

from_files <- list.dirs(pqt_fldr, recursive = FALSE, full.names = F) |> sort()

# Get a random sample of queries
dta <- here(pqt_fldr, from_files[[1]]) |> arrow::open_dataset()

# Setting the random access options
set.seed(12345)
n <- 10
n_size <- 50
all_samples_files <-
  from_files |>
  map(
    ~ {
      all_options <- here(pqt_fldr, .x) |>
        arrow::open_dataset() |>
        distinct(country, year, area, gender, age) |>
        collect()
      1:n |> map(~ sample_n(all_options, n_size))
    }
  )

# using built-in arrow functions -------------------------------------------
get_pqt_data <- \(con_tbl, one_sample) {
  con_tbl |>
    semi_join(
      one_sample,
      by = c("country", "year", "area", "gender", "age"),
      copy = TRUE
    )
}
here("data-testing", from_files[[3]]) |>
  arrow::open_dataset() |>
  get_pqt_data(one_sample = all_samples_files[[3]][[1]]) |>
  collect()

# using duckdb -----------------------------------------
get_duck_data <- \(con, one_sample) {
  tbl(con, "dta") |> get_pqt_data(one_sample)
}

duck_con <- duckdb(file.path(duck_fldr, paste0(from_files[[1]], ".duckdb"))) |>
  dbConnect()
get_duck_data(duck_con, all_samples_files[[1]][[1]]) |> show_query()
get_duck_data(duck_con, all_samples_files[[1]][[1]]) |> collect()

# # using indexed data.table -----------------------------------------
library(data.table)
library(collapse)

read_dt <- \(con) {
  dta <- con |> collect() |> qDT()
  setkey(dta, country, year)
  setindex(dta, country, year, area, gender, age)
  return(dta)
}

get_dt_data <- \(dt_con, one_sample) {
  one_sample <- copy(one_sample) |> qDT()
  setkey(one_sample, country, year, area, gender, age)
  dt_con[one_sample, on = .(country, year, area, gender, age), nomatch = 0]
}

from_dt <- here(pqt_fldr, from_files[[1]]) |> arrow::open_dataset() |> read_dt()
get_dt_data(copy(from_dt), all_samples_files[[1]][[2]])

# # using collapse -----------------------------------------

get_collaps_data <- \(dt_con, one_sample) {
  dt_con |>
    collapse::join(
      one_sample,
      on = c("country", "year", "area", "gender", "age"),
      how = "semi",
      verbose = FALSE,
      sort = FALSE
    )
}
get_collaps_data(copy(from_dt), all_samples_files[[1]][[2]])


# Benchmarking
all_samples_files |>
  purrr::walk2(
    from_files,
    ~ {
      con_nm <- .y
      req_list <- .x

      con_tbl_pqt <-
        here("data-testing", con_nm) |>
        arrow::open_dataset()

      con_tbl_duckdb <- file.path(duck_fldr, paste0(con_nm, ".duckdb")) |>
        duckdb() |>
        dbConnect()

      con_dt <- read_dt(con_tbl_pqt)

      md_out <-
        bench::mark(
          walk(req_list, ~ get_pqt_data(con_tbl_pqt, .x) |> collect()),
          # walk(req_list, ~ get_duck_data(con_tbl_duckdb, .x) |> collect()),
          read_dt(con_tbl_pqt),
          copy(con_dt),
          walk(req_list, ~ get_dt_data(copy(con_dt), .x)),
          walk(req_list, ~ get_collaps_data(con_dt, .x)),
          iterations = 3,
          check = FALSE
        )

      dbDisconnect(con_tbl_duckdb, shutdown = TRUE)

      cat("\n\n\n")
      cat(con_nm, "\n")
      md_out |>
        select(expression, min, median, mem_alloc) |>
        print()
    }
  )
```


> Note, benchmarking startign with `walk` tests 10 random filterring queries of 50 countries/years/areas/genders/ages combinations each.
> Using DUCKDB for filterring was way too slow, therefore, it was not done.
> To speed up duckdb, one need to use IEJoin (perhaps). 


```

sample_00001k 
# A tibble: 5 × 4
  expression                                                   min   median mem_alloc
  <bch:expr>                                              <bch:tm> <bch:tm> <bch:byt>
1 walk(req_list, ~collect(get_pqt_data(con_tbl_pqt, .x))) 240.23ms 263.65ms  686.56KB
2 read_dt(con_tbl_pqt)                                      4.05ms   4.18ms    22.3KB
3 copy(con_dt)                                              18.6µs   22.8µs   91.48KB
4 walk(req_list, ~get_dt_data(copy(con_dt), .x))           23.56ms  25.36ms    1.99MB
5 walk(req_list, ~get_collaps_data(con_dt, .x))            508.8µs  593.1µs  393.23KB
                     


sample_0001m 
# A tibble: 5 × 4
  expression                                                   min   median mem_alloc
  <bch:expr>                                              <bch:tm> <bch:tm> <bch:byt>
1 walk(req_list, ~collect(get_pqt_data(con_tbl_pqt, .x)))    845ms  891.3ms   469.1KB
2 read_dt(con_tbl_pqt)                                     96.91ms  97.43ms    88.7MB
3 copy(con_dt)                                              8.53ms   9.06ms    38.2MB
4 walk(req_list, ~get_dt_data(copy(con_dt), .x))          135.26ms 136.08ms   423.4MB
5 walk(req_list, ~get_collaps_data(con_dt, .x))            67.69ms  68.16ms   116.1MB
                     


sample_0005m 
# A tibble: 5 × 4
  expression                                                   min   median mem_alloc
  <bch:expr>                                              <bch:tm> <bch:tm> <bch:byt>
1 walk(req_list, ~collect(get_pqt_data(con_tbl_pqt, .x)))     1.3s    1.32s  535.98KB
2 read_dt(con_tbl_pqt)                                     245.3ms 252.76ms   443.3MB
3 copy(con_dt)                                              43.9ms  44.54ms  190.79MB
4 walk(req_list, ~get_dt_data(copy(con_dt), .x))           571.3ms 573.38ms    2.06GB
5 walk(req_list, ~get_collaps_data(con_dt, .x))            315.7ms 319.91ms  580.36MB
                     


sample_0050m 
# A tibble: 5 × 4
  expression                                                   min   median mem_alloc
  <bch:expr>                                              <bch:tm> <bch:tm> <bch:byt>
1 walk(req_list, ~collect(get_pqt_data(con_tbl_pqt, .x)))    6.84s    6.95s  469.14KB
2 read_dt(con_tbl_pqt)                                       2.75s    2.85s    4.33GB
3 copy(con_dt)                                            435.12ms 439.11ms    1.86GB
4 walk(req_list, ~get_dt_data(copy(con_dt), .x))              6.1s     6.2s   20.59GB
5 walk(req_list, ~get_collaps_data(con_dt, .x))              3.46s    3.46s    5.67GB
                     


sample_0150m 
# A tibble: 5 × 4
  expression                                                   min   median mem_alloc
  <bch:expr>                                              <bch:tm> <bch:tm> <bch:byt>
1 walk(req_list, ~collect(get_pqt_data(con_tbl_pqt, .x)))      20s   20.17s  469.14KB
2 read_dt(con_tbl_pqt)                                       7.52s    8.25s   12.98GB
3 copy(con_dt)                                               1.31s    1.58s    5.59GB
4 walk(req_list, ~get_dt_data(copy(con_dt), .x))            17.79s   18.76s   61.74GB
5 walk(req_list, ~get_collaps_data(con_dt, .x))             10.55s   10.97s   16.99GB

```



